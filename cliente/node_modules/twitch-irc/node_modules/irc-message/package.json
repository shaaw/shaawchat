{
  "name": "irc-message",
  "version": "3.0.1",
  "description": "Performant, streaming IRC message parser",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/expr/irc-message.git"
  },
  "keywords": [
    "irc",
    "message",
    "parser",
    "chat"
  ],
  "author": {
    "name": "Fionn Kelleher",
    "email": "me@fionn.co"
  },
  "license": "BSD-2-Clause",
  "bugs": {
    "url": "https://github.com/expr/irc-message/issues"
  },
  "homepage": "https://github.com/expr/irc-message",
  "dependencies": {
    "iso8601-convert": "^1.0.0",
    "through2": "^0.6.3",
    "irc-prefix-parser": "^1.0.1"
  },
  "devDependencies": {
    "mocha": "^2.1.0"
  },
  "readme": "# irc-message [![Build Status](https://travis-ci.org/expr/irc-message.svg?branch=master)](https://travis-ci.org/expr/irc-message)\n> Performant, streaming IRC message parser\n\nirc-message provides an object stream capable of parsing [RFC1459-compliant IRC messages](http://tools.ietf.org/html/rfc2812#section-2.3.1), with support for [IRCv3 message tags](https://github.com/ircv3/ircv3-specifications/blob/master/specification/message-tags-3.2.md). This also includes server-to-server protocols such as TS6, Spanning Tree, and the UnrealIRCd protocol.\n\n## Installation\n\n    npm install irc-message\n\n## Usage\n\n### `createStream(options)`\n\nReturns an object stream, taking in `Buffer`s/`String`s of raw IRC data. Data should not be line-buffered, this stream handles splitting and buffering automatically. and pushing objects containing the following keys.\n\n* `raw` - unparsed IRC message (string)\n* `tags` - IRCv3 message tags\n* `prefix` - message prefix/source\n* `command` - message command/verb\n* `params` - an array of middle and trailing parameters\n\nOptional `options` object supports\n\n* `parsePrefix` - replace the prefix with an object generated by _[irc-prefix-parser](https://github.com/expr/irc-prefix-parser)_. Defaults to `false`.\n* `convertTimestamp` - if the message has a _time_ tag, convert it into a JavaScript `Date` object (see _[server-time](https://github.com/ircv3/ircv3-specifications/blob/master/extensions/server-time-3.2.md)_ spec for reference). Defaults to `false`.\n\n```js\nvar net = require('net')\nvar ircMsg = require('irc-message')\n\nnet.connect(6667, 'irc.freenode.net')\n    .pipe(ircMsg.createStream())\n    .on('data', function(message) {\n        console.log(message)\n    })\n```\n\n### `parse(data)`\n\nYou can also access the message parser directly. The parser function expects a string without any CRLF sequences. If the string is malformed, `null` is returned. Otherwise, an object representing the message is returned (see `createStream()` for format).\n\n```js\nvar parse = require('irc-message').parse\n\nconsole.log(parse(':hello!sir@madam PRIVMSG #test :Hello, world!'))\n/* { \n *   raw: ':hello!sir@madam PRIVMSG #test :Hello, world!',\n *   tags: {}, \n *   prefix: 'hello!sir@madam', \n *   command: 'PRIVMSG',\n *   params: ['#test', 'Hello, world!']\n * }\n */\n```\n",
  "readmeFilename": "README.md",
  "_id": "irc-message@3.0.1",
  "_from": "irc-message@^3.0.1"
}
